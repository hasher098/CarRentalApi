// <auto-generated />
using System;
using CarRentalApi.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRentalApi.Migrations
{
    [DbContext(typeof(CarRentDbContext))]
    [Migration("20201115165530_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlackList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlacklistedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BlacklistedUserId")
                        .IsUnique()
                        .HasFilter("[BlacklistedUserId] IS NOT NULL");

                    b.ToTable("BlackList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlacklistedUserId = "b889e9e9-0b5d-453f-9363-e93637b854aa",
                            IsBlacklisted = true,
                            Reason = "Ukradł drzwi"
                        },
                        new
                        {
                            Id = 2,
                            BlacklistedUserId = "10966c59-49f1-470a-a90c-94755d3870b3",
                            IsBlacklisted = true,
                            Reason = "Skasował auto"
                        },
                        new
                        {
                            Id = 3,
                            BlacklistedUserId = "711aa82e-b3af-482a-b2eb-8056e2b4e482",
                            IsBlacklisted = true,
                            Reason = "Zostawił auto w krzakach"
                        },
                        new
                        {
                            Id = 4,
                            BlacklistedUserId = "c514dedb-db0a-49e9-a5e6-44e875c0d6fd",
                            IsBlacklisted = true,
                            Reason = "Pobił prezesa firmy"
                        },
                        new
                        {
                            Id = 5,
                            BlacklistedUserId = "9952718a-e4af-40b1-8dce-fe07967d4534",
                            IsBlacklisted = true,
                            Reason = "Piłował auto do odciny i zatarł silnik"
                        },
                        new
                        {
                            Id = 6,
                            BlacklistedUserId = "304f6dbe-c471-45ad-a540-f4992be6f746",
                            IsBlacklisted = true,
                            Reason = "Potrącił starą kobiete na pasach i nie poniósł żadnych konsekwencji prawnych"
                        });
                });

            modelBuilder.Entity("Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("RoofRack")
                        .HasColumnType("bit");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasMaxLength(1);

                    b.Property<string>("TrunkCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Hatchback",
                            Brand = "Kia",
                            Class = "B",
                            Color = "Czarny",
                            EngineCapacity = "1.4",
                            Gearbox = "M",
                            Model = "Rio",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "400L",
                            Year = 2012
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Hatchback",
                            Brand = "Toyota",
                            Class = "B",
                            Color = "Srebrny",
                            EngineCapacity = "1.0",
                            Gearbox = "M",
                            Model = "Yaris",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "768L",
                            Year = 2015
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Hatchback",
                            Brand = "Opel",
                            Class = "B",
                            Color = "Niebieski",
                            EngineCapacity = "1.6 T",
                            Gearbox = "A",
                            Model = "Corsa",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1100L",
                            Year = 2010
                        },
                        new
                        {
                            Id = 4,
                            BodyType = "Sedan",
                            Brand = "Volkswagen",
                            Class = "D",
                            Color = "Czarny",
                            EngineCapacity = "2.0",
                            Gearbox = "M",
                            Model = "Passat",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1150L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 5,
                            BodyType = "Sedan",
                            Brand = "Opel",
                            Class = "D",
                            Color = "Czarny",
                            EngineCapacity = "2.0",
                            Gearbox = "M",
                            Model = "Insignia",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1470L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 6,
                            BodyType = "Hatchback",
                            Brand = "Nissan",
                            Class = "A",
                            Color = "Czerwony",
                            EngineCapacity = "1.0",
                            Gearbox = "M",
                            Model = "Micra",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "800L",
                            Year = 2015
                        },
                        new
                        {
                            Id = 7,
                            BodyType = "Hatchback",
                            Brand = "Nissan",
                            Class = "A",
                            Color = "Czerwony",
                            EngineCapacity = "1.0",
                            Gearbox = "M",
                            Model = "Micra",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "800L",
                            Year = 2015
                        },
                        new
                        {
                            Id = 8,
                            BodyType = "Hatchback",
                            Brand = "Volkswagen",
                            Class = "B",
                            Color = "Niebieski",
                            EngineCapacity = "2.0 TSI",
                            Gearbox = "AT",
                            Model = "Golf",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "800L",
                            Year = 2017
                        },
                        new
                        {
                            Id = 9,
                            BodyType = "Kombi",
                            Brand = "Volkswagen",
                            Class = "D",
                            Color = "Czarny",
                            EngineCapacity = "2.0 TSI",
                            Gearbox = "M",
                            Model = "Passat",
                            RoofRack = true,
                            Seats = 5,
                            TrunkCapacity = "1400L",
                            Year = 2013
                        },
                        new
                        {
                            Id = 10,
                            BodyType = "Kombi",
                            Brand = "Mazda",
                            Class = "D",
                            Color = "Czerwony",
                            EngineCapacity = "2.0 Skyaktiv",
                            Gearbox = "AT",
                            Model = "6",
                            RoofRack = true,
                            Seats = 5,
                            TrunkCapacity = "1400L",
                            Year = 2015
                        },
                        new
                        {
                            Id = 11,
                            BodyType = "Sedan",
                            Brand = "Ford",
                            Class = "D",
                            Color = "Czarny",
                            EngineCapacity = "2.0 TDCi",
                            Gearbox = "M",
                            Model = "Mondeo",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1450L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 12,
                            BodyType = "Sedan",
                            Brand = "Audi",
                            Class = "F",
                            Color = "Czarny",
                            EngineCapacity = "4.2 TDI",
                            Gearbox = "AT",
                            Model = "A8",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1700L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 13,
                            BodyType = "Kombi",
                            Brand = "Audi",
                            Class = "F",
                            Color = "Czarny",
                            EngineCapacity = "3.0 TDI",
                            Gearbox = "AT",
                            Model = "A6",
                            RoofRack = true,
                            Seats = 5,
                            TrunkCapacity = "1570L",
                            Year = 2014
                        },
                        new
                        {
                            Id = 14,
                            BodyType = "Sedan",
                            Brand = "Audi",
                            Class = "S",
                            Color = "Czarny",
                            EngineCapacity = "5.0 V10 TFSI",
                            Gearbox = "AT",
                            Model = "RS6",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1500L",
                            Year = 2010
                        },
                        new
                        {
                            Id = 15,
                            BodyType = "Hatchback",
                            Brand = "Fiat",
                            Class = "A",
                            Color = "Biały",
                            EngineCapacity = "1.0",
                            Gearbox = "M",
                            Model = "Panda",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1000L",
                            Year = 2017
                        },
                        new
                        {
                            Id = 16,
                            BodyType = "Hatchback",
                            Brand = "BMW",
                            Class = "C",
                            Color = "Czarny",
                            EngineCapacity = "2.0 D",
                            Gearbox = "M",
                            Model = "Seria 1",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1280L",
                            Year = 2013
                        },
                        new
                        {
                            Id = 17,
                            BodyType = "Hatchback",
                            Brand = "Audi",
                            Class = "C",
                            Color = "Czarny",
                            EngineCapacity = "2.0 TDI",
                            Gearbox = "AT",
                            Model = "A3",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1250L",
                            Year = 2014
                        },
                        new
                        {
                            Id = 18,
                            BodyType = "Coupe",
                            Brand = "Lamborghini",
                            Class = "S",
                            Color = "Żółty",
                            EngineCapacity = "6.5 V12",
                            Gearbox = "AT",
                            Model = "Aventador",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "1450L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 19,
                            BodyType = "Coupe",
                            Brand = "Audi",
                            Class = "S",
                            Color = "Niebieski",
                            EngineCapacity = "5.2",
                            Gearbox = "AT",
                            Model = "R8",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "---",
                            Year = 2018
                        },
                        new
                        {
                            Id = 20,
                            BodyType = "Cabriolet",
                            Brand = "Audi",
                            Class = "H",
                            Color = "Biały",
                            EngineCapacity = "2.0 TFSI",
                            Gearbox = "AT",
                            Model = "TT",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "600L",
                            Year = 2015
                        },
                        new
                        {
                            Id = 21,
                            BodyType = "Cabriolet",
                            Brand = "BMW",
                            Class = "H",
                            Color = "Czarny",
                            EngineCapacity = "2.5",
                            Gearbox = "M",
                            Model = "Z4",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "280L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 22,
                            BodyType = "Van",
                            Brand = "Volkswagen",
                            Class = "M",
                            Color = "Czarny",
                            EngineCapacity = "2.0 TDI",
                            Gearbox = "AT",
                            Model = "Sharan",
                            RoofRack = false,
                            Seats = 7,
                            TrunkCapacity = "2000L",
                            Year = 2016
                        },
                        new
                        {
                            Id = 23,
                            BodyType = "Van",
                            Brand = "Seat",
                            Class = "M",
                            Color = "Srebrny",
                            EngineCapacity = "2.0 TDI",
                            Gearbox = "M",
                            Model = "Alhambra",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "2000L",
                            Year = 2018
                        },
                        new
                        {
                            Id = 24,
                            BodyType = "Minivan",
                            Brand = "Ford",
                            Class = "M",
                            Color = "Czarny",
                            EngineCapacity = "2.0 Ecoblue",
                            Gearbox = "AT",
                            Model = "Galaxy",
                            RoofRack = false,
                            Seats = 5,
                            TrunkCapacity = "2000L",
                            Year = 2017
                        },
                        new
                        {
                            Id = 25,
                            BodyType = "SUV",
                            Brand = "Audi",
                            Class = "J",
                            Color = "Czarny",
                            EngineCapacity = "3.0 TDI",
                            Gearbox = "M",
                            Model = "Q7",
                            RoofRack = true,
                            Seats = 5,
                            TrunkCapacity = "1930L",
                            Year = 2017
                        });
                });

            modelBuilder.Entity("CarCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.ToTable("CarCopy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            IsRented = true,
                            RegistrationNumber = "ERA 2137P"
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            IsRented = true,
                            RegistrationNumber = "SC 12345"
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            IsRented = false,
                            RegistrationNumber = "SCZ 1523A"
                        },
                        new
                        {
                            Id = 4,
                            CarId = 4,
                            IsRented = true,
                            RegistrationNumber = "SKL S8421"
                        },
                        new
                        {
                            Id = 5,
                            CarId = 5,
                            IsRented = true,
                            RegistrationNumber = "SLU 67123"
                        },
                        new
                        {
                            Id = 6,
                            CarId = 6,
                            IsRented = false,
                            RegistrationNumber = "EPJ AS128"
                        },
                        new
                        {
                            Id = 7,
                            CarId = 7,
                            IsRented = false,
                            RegistrationNumber = "EL R2321A"
                        },
                        new
                        {
                            Id = 8,
                            CarId = 8,
                            IsRented = true,
                            RegistrationNumber = "SK 9632A"
                        },
                        new
                        {
                            Id = 9,
                            CarId = 9,
                            IsRented = false,
                            RegistrationNumber = "SB 123123"
                        },
                        new
                        {
                            Id = 10,
                            CarId = 10,
                            IsRented = false,
                            RegistrationNumber = "WI 48235"
                        },
                        new
                        {
                            Id = 11,
                            CarId = 11,
                            IsRented = true,
                            RegistrationNumber = "EWI 22135"
                        },
                        new
                        {
                            Id = 12,
                            CarId = 12,
                            IsRented = true,
                            RegistrationNumber = "SC AP442"
                        },
                        new
                        {
                            Id = 13,
                            CarId = 13,
                            IsRented = true,
                            RegistrationNumber = "SCZ 52123"
                        },
                        new
                        {
                            Id = 14,
                            CarId = 14,
                            IsRented = true,
                            RegistrationNumber = "GDA 32145"
                        },
                        new
                        {
                            Id = 15,
                            CarId = 15,
                            IsRented = true,
                            RegistrationNumber = "SW 12346"
                        },
                        new
                        {
                            Id = 16,
                            CarId = 16,
                            IsRented = false,
                            RegistrationNumber = "SZ 325SA"
                        },
                        new
                        {
                            Id = 17,
                            CarId = 17,
                            IsRented = false,
                            RegistrationNumber = "EPI 22598"
                        },
                        new
                        {
                            Id = 18,
                            CarId = 18,
                            IsRented = true,
                            RegistrationNumber = "EP PP223"
                        },
                        new
                        {
                            Id = 19,
                            CarId = 19,
                            IsRented = false,
                            RegistrationNumber = "SR 42345"
                        },
                        new
                        {
                            Id = 20,
                            CarId = 20,
                            IsRented = true,
                            RegistrationNumber = "WU 23456"
                        },
                        new
                        {
                            Id = 21,
                            CarId = 21,
                            IsRented = true,
                            RegistrationNumber = "WZ PQW21"
                        },
                        new
                        {
                            Id = 22,
                            CarId = 22,
                            IsRented = false,
                            RegistrationNumber = "KR 42931"
                        },
                        new
                        {
                            Id = 23,
                            CarId = 23,
                            IsRented = true,
                            RegistrationNumber = "KRA 29341"
                        },
                        new
                        {
                            Id = 24,
                            CarId = 24,
                            IsRented = false,
                            RegistrationNumber = "DW 33257"
                        },
                        new
                        {
                            Id = 25,
                            CarId = 25,
                            IsRented = true,
                            RegistrationNumber = "DWR 35812"
                        });
                });

            modelBuilder.Entity("CarRentalApi.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDcardNumber")
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8399119f-568a-48a8-9fb1-d6a1f451f203",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcb43428-689a-4a8a-b8e6-dcdb335f5ab3",
                            Email = "Admin@car.pl",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@CAR.PL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJvecAD/HZhoJ9CP2U7W1fTqi03oqb7VOp0kMEtvLcGtQtJmb+/mRK9t2jakVFjymw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JRO5CVOZMDY4Z2SLAFAUVRMKZRC37KYY",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "6bb1647e-c2f3-4def-a875-32644e0b2b9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5ad219f-a9f2-496b-bf0c-8c2a497b9e3e",
                            Email = "Kowalski@car.pl",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "KOWALSKI@CAR.PL",
                            NormalizedUserName = "KOWALSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEADelhIMbQU6jfcAMsBqJQTVDiaThzjbTdIfjK2QWJNrTRzo2SY35zKu40IsY/nExg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NF4PUWRF3ZAADUYZ4NGTF2HESVLTQI7O",
                            TwoFactorEnabled = false,
                            UserName = "Kowalski"
                        },
                        new
                        {
                            Id = "b889e9e9-0b5d-453f-9363-e93637b854aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7db6a340-5be5-4d4e-9e66-0cfcd3cafed3",
                            Email = "Nowak@car.pl",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "NOWAK@CAR.PL",
                            NormalizedUserName = "NOWAK",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXXrcu6Ye/fiHYpciyJvI4YJpii/DoUSonWk8MDmANEMmj6CWd0/4BWilxU5qrVXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "C6SFYJKYII3YIC3UENBIFAIUQTSLSEXZ",
                            TwoFactorEnabled = false,
                            UserName = "Nowak"
                        },
                        new
                        {
                            Id = "10966c59-49f1-470a-a90c-94755d3870b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a870f5e2-c084-4929-bbf5-6596af966e39",
                            Email = "Lewandowski123@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "LEWANDOWSKI123@GMAIL.COM",
                            NormalizedUserName = "LEWANDOWSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEE8ySKAxHp1dS9Er4pzs8FrqWwrdhZxsEKAs5rW3DQXRMgJVn5y5g3N8/e/4EJuK+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AOLABNGPJHBQDI2K5K6VX2OYDOLZABWZ",
                            TwoFactorEnabled = false,
                            UserName = "Lewandowski"
                        },
                        new
                        {
                            Id = "c89548b7-838f-4b90-94ac-763198501ce9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18b4ca59-cb79-459c-9578-8d65a5090d6c",
                            Email = "OwcaWK@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "OWCAWK@GMAIL.COM",
                            NormalizedUserName = "OWCAWK",
                            PasswordHash = "AQAAAAEAACcQAAAAEAglmTAktrhxGf8FTo4ChX6re3EMp4Hi5jMl946pGhDMhZ0BFem75BKME7CrgYpJww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "LVC765MPWOBA3V2SZXSYWLPEVTTXDRJQ",
                            TwoFactorEnabled = false,
                            UserName = "OwcaWK"
                        },
                        new
                        {
                            Id = "9952718a-e4af-40b1-8dce-fe07967d4534",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08680348-2b35-47f9-a90e-430ac9e91db7",
                            Email = "EndrjuDuda@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ENDRJUDUDA@GMAIL.com",
                            NormalizedUserName = "ENDRJUDUDA",
                            PasswordHash = "AQAAAAEAACcQAAAAEB8p9tWazRY8rhOEu/USJAstdhfMDpQf+82fi51KkrGYfUCeFU0qIqoPtv7E/AhjMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WTWJMTDKPF3HA6OUK472DQAKAJ54XTRS",
                            TwoFactorEnabled = false,
                            UserName = "EndrjuDuda"
                        },
                        new
                        {
                            Id = "c514dedb-db0a-49e9-a5e6-44e875c0d6fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b33cd0-0ab7-4d8e-893d-8da6feb7096d",
                            Email = "Ziobro123@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ZIOBRO123@GMAIL.COM",
                            NormalizedUserName = "ZBIGNIEWZIOBRO",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQ0yzuj4mcljU0lmBZHFHZun6FuoN2oR6YF6dKaDPY/xWES3NSYBRMb1gozEQuFyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XJX42PJ6RHFIPJXJI25FTEH4HBEYLGSX",
                            TwoFactorEnabled = false,
                            UserName = "ZbigniewZiobro"
                        },
                        new
                        {
                            Id = "711aa82e-b3af-482a-b2eb-8056e2b4e482",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c76128d8-d3a9-4b45-929f-b4375b133ffc",
                            Email = "Stonoga@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "STONOGA@GMAIL.COM",
                            NormalizedUserName = "ZBYSZEKSTONOGA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPmAxB56NFlCeenVjKtgCyLEQ9T7hEBb9OyhtOdWT1H9Ma48df361TfTHqYLxSGfqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K6C2VKRDVSTZGZAOZ2SGLFV2W73L57M2",
                            TwoFactorEnabled = false,
                            UserName = "ZbyszekStonoga"
                        },
                        new
                        {
                            Id = "304f6dbe-c471-45ad-a540-f4992be6f746",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4373af8a-d161-4d96-851a-8d8506071b35",
                            Email = "Janowicz@gmail.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "JANOWICZ@GMAIL.COM",
                            NormalizedUserName = "JERZYJANOWICZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEKvFcCpDXeifSMEOZvbCUujCmLcw237R1v0P67LGE1MgFhB/zMQ3cG2UeBdt+BmvXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TMP3G6SC4PUNHPLDMKNIQ45NIDA6CY2G",
                            TwoFactorEnabled = false,
                            UserName = "JerzyJanowicz"
                        },
                        new
                        {
                            Id = "4b9d5218-9049-487e-b5b7-74b7b6527cf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6056ca99-1b1a-4da3-8296-e7bfd454fbce",
                            Email = "Hajto@wp.pl",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "HAJTO@WP.PL",
                            NormalizedUserName = "TOMASZHAJTO",
                            PasswordHash = "AQAAAAEAACcQAAAAEMhlYs1Bv230/gikTAepq5ACdvZGExUFFsg7mCr5n4djDgCHgnfFlmwdCfyjGJOnng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6R6COOBSQJ6BUB7MODICTNADCJ7V2D4Z",
                            TwoFactorEnabled = false,
                            UserName = "TomaszHajto"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarCopyId")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarCopyId")
                        .IsUnique();

                    b.ToTable("Pricing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarCopyId = 1,
                            Class = "A",
                            Description = "Mały samochód",
                            PricePerDay = 50
                        },
                        new
                        {
                            Id = 2,
                            CarCopyId = 2,
                            Class = "B",
                            Description = "Auto miejskie",
                            PricePerDay = 100
                        },
                        new
                        {
                            Id = 3,
                            CarCopyId = 3,
                            Class = "C",
                            Description = "Auto typu Kompakt",
                            PricePerDay = 150
                        },
                        new
                        {
                            Id = 4,
                            CarCopyId = 4,
                            Class = "D",
                            Description = "Auto klasy średniej",
                            PricePerDay = 200
                        },
                        new
                        {
                            Id = 5,
                            CarCopyId = 5,
                            Class = "E",
                            Description = "Auto klasy wyższej",
                            PricePerDay = 350
                        },
                        new
                        {
                            Id = 6,
                            CarCopyId = 6,
                            Class = "F",
                            Description = "Auto luksusowe",
                            PricePerDay = 500
                        },
                        new
                        {
                            Id = 7,
                            CarCopyId = 7,
                            Class = "S",
                            Description = "Auto sportowe",
                            PricePerDay = 500
                        },
                        new
                        {
                            Id = 8,
                            CarCopyId = 8,
                            Class = "H",
                            Description = "Auto typu Kabriolet",
                            PricePerDay = 250
                        },
                        new
                        {
                            Id = 9,
                            CarCopyId = 9,
                            Class = "J",
                            Description = "Auto terenowe",
                            PricePerDay = 400
                        },
                        new
                        {
                            Id = 10,
                            CarCopyId = 10,
                            Class = "M",
                            Description = "Auto typu VAN",
                            PricePerDay = 300
                        });
                });

            modelBuilder.Entity("Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarCopyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarCopyId");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Rent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarCopyId = 1,
                            RentDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "6bb1647e-c2f3-4def-a875-32644e0b2b9f"
                        },
                        new
                        {
                            Id = 2,
                            CarCopyId = 2,
                            RentDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "10966c59-49f1-470a-a90c-94755d3870b3"
                        },
                        new
                        {
                            Id = 3,
                            CarCopyId = 3,
                            RentDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "c89548b7-838f-4b90-94ac-763198501ce9"
                        },
                        new
                        {
                            Id = 4,
                            CarCopyId = 4,
                            RentDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "b889e9e9-0b5d-453f-9363-e93637b854aa"
                        },
                        new
                        {
                            Id = 5,
                            CarCopyId = 5,
                            RentDate = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "304f6dbe-c471-45ad-a540-f4992be6f746"
                        });
                });

            modelBuilder.Entity("BlackList", b =>
                {
                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", "ApplicationUser")
                        .WithOne("BlackList")
                        .HasForeignKey("BlackList", "BlacklistedUserId");
                });

            modelBuilder.Entity("CarCopy", b =>
                {
                    b.HasOne("Car", "Car")
                        .WithOne("CarCopy")
                        .HasForeignKey("CarCopy", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pricing", b =>
                {
                    b.HasOne("CarCopy", "CarCopy")
                        .WithOne("Pricing")
                        .HasForeignKey("Pricing", "CarCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rent", b =>
                {
                    b.HasOne("CarCopy", "CarCopy")
                        .WithMany()
                        .HasForeignKey("CarCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalApi.Authentication.ApplicationUser", "ApplicationUser")
                        .WithOne("Rent")
                        .HasForeignKey("Rent", "UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
